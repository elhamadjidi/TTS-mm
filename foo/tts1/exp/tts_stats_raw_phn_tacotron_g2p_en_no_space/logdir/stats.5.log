# python3 -m espnet2.bin.tts_train --collect_stats true --write_collected_feats false --use_preprocessor true --token_type phn --token_list dump/token_list/phn_tacotron_g2p_en_no_space/tokens.txt --non_linguistic_symbols none --cleaner tacotron --g2p g2p_en_no_space --normalize none --pitch_normalize none --energy_normalize none --train_data_path_and_name_and_type dump/raw/train/text,text,text --train_data_path_and_name_and_type dump/raw/train/wav.scp,speech,sound --valid_data_path_and_name_and_type dump/raw/valid/text,text,text --valid_data_path_and_name_and_type dump/raw/valid/wav.scp,speech,sound --train_shape_file exp/tts_stats_raw_phn_tacotron_g2p_en_no_space/logdir/train.5.scp --valid_shape_file exp/tts_stats_raw_phn_tacotron_g2p_en_no_space/logdir/valid.5.scp --output_dir exp/tts_stats_raw_phn_tacotron_g2p_en_no_space/logdir/stats.5 --config conf/train.yaml --feats_extract fbank --feats_extract_conf n_fft=1024 --feats_extract_conf hop_length=256 --feats_extract_conf win_length=null --feats_extract_conf fs=22050 --feats_extract_conf fmin=80 --feats_extract_conf fmax=7600 --feats_extract_conf n_mels=80 --pitch_extract_conf fs=22050 --pitch_extract_conf n_fft=1024 --pitch_extract_conf hop_length=256 --pitch_extract_conf f0max=400 --pitch_extract_conf f0min=80 --energy_extract_conf fs=22050 --energy_extract_conf n_fft=1024 --energy_extract_conf hop_length=256 --energy_extract_conf win_length=null 
# Started at Tue Jun  7 19:54:29 UTC 2022
#
/usr/bin/python3 /content/espnet/espnet2/bin/tts_train.py --collect_stats true --write_collected_feats false --use_preprocessor true --token_type phn --token_list dump/token_list/phn_tacotron_g2p_en_no_space/tokens.txt --non_linguistic_symbols none --cleaner tacotron --g2p g2p_en_no_space --normalize none --pitch_normalize none --energy_normalize none --train_data_path_and_name_and_type dump/raw/train/text,text,text --train_data_path_and_name_and_type dump/raw/train/wav.scp,speech,sound --valid_data_path_and_name_and_type dump/raw/valid/text,text,text --valid_data_path_and_name_and_type dump/raw/valid/wav.scp,speech,sound --train_shape_file exp/tts_stats_raw_phn_tacotron_g2p_en_no_space/logdir/train.5.scp --valid_shape_file exp/tts_stats_raw_phn_tacotron_g2p_en_no_space/logdir/valid.5.scp --output_dir exp/tts_stats_raw_phn_tacotron_g2p_en_no_space/logdir/stats.5 --config conf/train.yaml --feats_extract fbank --feats_extract_conf n_fft=1024 --feats_extract_conf hop_length=256 --feats_extract_conf win_length=null --feats_extract_conf fs=22050 --feats_extract_conf fmin=80 --feats_extract_conf fmax=7600 --feats_extract_conf n_mels=80 --pitch_extract_conf fs=22050 --pitch_extract_conf n_fft=1024 --pitch_extract_conf hop_length=256 --pitch_extract_conf f0max=400 --pitch_extract_conf f0min=80 --energy_extract_conf fs=22050 --energy_extract_conf n_fft=1024 --energy_extract_conf hop_length=256 --energy_extract_conf win_length=null
[a338158aa2f0] 2022-06-07 19:54:32,234 (tts:291) INFO: Vocabulary size: 52
[a338158aa2f0] 2022-06-07 19:54:32,783 (abs_task:1149) INFO: pytorch.version=1.11.0+cu113, cuda.available=True, cudnn.version=8200, cudnn.benchmark=False, cudnn.deterministic=True
[a338158aa2f0] 2022-06-07 19:54:32,785 (abs_task:1150) INFO: Model structure:
ESPnetTTSModel(
  (feats_extract): LogMelFbank(
    (stft): Stft(n_fft=1024, win_length=1024, hop_length=256, center=True, normalized=False, onesided=True)
    (logmel): LogMel(sr=22050, n_fft=1024, n_mels=80, fmin=80, fmax=7600, htk=False)
  )
  (tts): Tacotron2(
    (enc): Encoder(
      (embed): Embedding(52, 512, padding_idx=0)
      (convs): ModuleList(
        (0): Sequential(
          (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Dropout(p=0.5, inplace=False)
        )
        (1): Sequential(
          (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Dropout(p=0.5, inplace=False)
        )
        (2): Sequential(
          (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,), bias=False)
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Dropout(p=0.5, inplace=False)
        )
      )
      (blstm): LSTM(512, 256, batch_first=True, bidirectional=True)
    )
    (dec): Decoder(
      (att): AttLoc(
        (mlp_enc): Linear(in_features=512, out_features=512, bias=True)
        (mlp_dec): Linear(in_features=1024, out_features=512, bias=False)
        (mlp_att): Linear(in_features=32, out_features=512, bias=False)
        (loc_conv): Conv2d(1, 32, kernel_size=(1, 31), stride=(1, 1), padding=(0, 15), bias=False)
        (gvec): Linear(in_features=512, out_features=1, bias=True)
      )
      (lstm): ModuleList(
        (0): ZoneOutCell(
          (cell): LSTMCell(768, 1024)
        )
        (1): ZoneOutCell(
          (cell): LSTMCell(1024, 1024)
        )
      )
      (prenet): Prenet(
        (prenet): ModuleList(
          (0): Sequential(
            (0): Linear(in_features=80, out_features=256, bias=True)
            (1): ReLU()
          )
          (1): Sequential(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): ReLU()
          )
        )
      )
      (postnet): Postnet(
        (postnet): ModuleList(
          (0): Sequential(
            (0): Conv1d(80, 512, kernel_size=(5,), stride=(1,), padding=(2,), bias=False)
            (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Tanh()
            (3): Dropout(p=0.5, inplace=False)
          )
          (1): Sequential(
            (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,), bias=False)
            (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Tanh()
            (3): Dropout(p=0.5, inplace=False)
          )
          (2): Sequential(
            (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,), bias=False)
            (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Tanh()
            (3): Dropout(p=0.5, inplace=False)
          )
          (3): Sequential(
            (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,), bias=False)
            (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Tanh()
            (3): Dropout(p=0.5, inplace=False)
          )
          (4): Sequential(
            (0): Conv1d(512, 80, kernel_size=(5,), stride=(1,), padding=(2,), bias=False)
            (1): BatchNorm1d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): Dropout(p=0.5, inplace=False)
          )
        )
      )
      (feat_out): Linear(in_features=1536, out_features=80, bias=False)
      (prob_out): Linear(in_features=1536, out_features=1, bias=True)
    )
    (taco2_loss): Tacotron2Loss(
      (l1_criterion): L1Loss()
      (mse_criterion): MSELoss()
      (bce_criterion): BCEWithLogitsLoss()
    )
    (attn_loss): GuidedAttentionLoss()
  )
)

Model summary:
    Class Name: ESPnetTTSModel
    Total Number of model parameters: 26.65 M
    Number of trainable parameters: 26.65 M (100.0%)
    Size: 106.58 MB
    Type: torch.float32
[a338158aa2f0] 2022-06-07 19:54:32,786 (abs_task:1153) INFO: Optimizer:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-06
    lr: 0.001
    maximize: False
    weight_decay: 0.0
)
[a338158aa2f0] 2022-06-07 19:54:32,786 (abs_task:1154) INFO: Scheduler: None
[a338158aa2f0] 2022-06-07 19:54:32,786 (abs_task:1164) INFO: Saving the configuration in exp/tts_stats_raw_phn_tacotron_g2p_en_no_space/logdir/stats.5/config.yaml
[a338158aa2f0] 2022-06-07 19:54:32,804 (abs_task:1174) INFO: Namespace(accum_grad=1, allow_variable_data_keys=False, batch_bins=5120000, batch_size=20, batch_type='numel', best_model_criterion=[['valid', 'loss', 'min'], ['train', 'loss', 'min']], bpemodel=None, chunk_length=500, chunk_shift_ratio=0.5, cleaner='tacotron', collect_stats=True, config='conf/train.yaml', cudnn_benchmark=False, cudnn_deterministic=True, cudnn_enabled=True, detect_anomaly=False, dist_backend='nccl', dist_init_method='env://', dist_launcher=None, dist_master_addr=None, dist_master_port=None, dist_rank=None, dist_world_size=None, distributed=False, dry_run=False, early_stopping_criterion=('valid', 'loss', 'min'), energy_extract=None, energy_extract_conf={'fs': 22050, 'n_fft': 1024, 'hop_length': 256, 'win_length': None}, energy_normalize=None, energy_normalize_conf={}, feats_extract='fbank', feats_extract_conf={'n_fft': 1024, 'hop_length': 256, 'win_length': None, 'fs': 22050, 'fmin': 80, 'fmax': 7600, 'n_mels': 80}, fold_length=[], freeze_param=[], g2p='g2p_en_no_space', grad_clip=1.0, grad_clip_type=2.0, grad_noise=False, ignore_init_mismatch=False, init_param=[], iterator_type='sequence', keep_nbest_models=5, local_rank=None, log_interval=None, log_level='INFO', max_cache_fd=32, max_cache_size=0.0, max_epoch=200, model_conf={}, multiple_iterator=False, multiprocessing_distributed=False, nbest_averaging_interval=0, ngpu=0, no_forward_run=False, non_linguistic_symbols=None, normalize=None, normalize_conf={}, num_att_plot=3, num_cache_chunks=1024, num_iters_per_epoch=500, num_workers=1, odim=None, optim='adam', optim_conf={'lr': 0.001, 'eps': 1e-06, 'weight_decay': 0.0}, output_dir='exp/tts_stats_raw_phn_tacotron_g2p_en_no_space/logdir/stats.5', patience=None, pitch_extract=None, pitch_extract_conf={'fs': 22050, 'n_fft': 1024, 'hop_length': 256, 'f0max': 400, 'f0min': 80}, pitch_normalize=None, pitch_normalize_conf={}, pretrain_path=None, print_config=False, required=['output_dir', 'token_list'], resume=False, scheduler=None, scheduler_conf={}, seed=0, sharded_ddp=False, sort_batch='descending', sort_in_batch='descending', token_list=['<blank>', '<unk>', 'AH0', 'DH', 'N', 'D', 'T', 'AA1', 'Z', 'R', 'G', 'L', 'EH1', 'IH1', 'K', 'IH0', 'HH', 'W', 'F', 'IY1', 'AO1', 'AH1', 'NG', 'B', 'AW1', 'EY1', 'S', 'M', 'P', 'AY1', 'OW1', 'AE1', 'V', 'OY1', 'UH1', 'UW1', 'SH', 'IY0', 'JH', 'OW0', 'ER0', 'TH', 'ER1', 'Y', 'EH2', 'CH', "'", 'EY2', 'AY0', 'ZH', 'UW0', '<sos/eos>'], token_type='phn', train_data_path_and_name_and_type=[('dump/raw/train/text', 'text', 'text'), ('dump/raw/train/wav.scp', 'speech', 'sound')], train_dtype='float32', train_shape_file=['exp/tts_stats_raw_phn_tacotron_g2p_en_no_space/logdir/train.5.scp'], tts='tacotron2', tts_conf={'embed_dim': 512, 'elayers': 1, 'eunits': 512, 'econv_layers': 3, 'econv_chans': 512, 'econv_filts': 5, 'atype': 'location', 'adim': 512, 'aconv_chans': 32, 'aconv_filts': 15, 'cumulate_att_w': True, 'dlayers': 2, 'dunits': 1024, 'prenet_layers': 2, 'prenet_units': 256, 'postnet_layers': 5, 'postnet_chans': 512, 'postnet_filts': 5, 'output_activation': None, 'use_batch_norm': True, 'use_concate': True, 'use_residual': False, 'dropout_rate': 0.5, 'zoneout_rate': 0.1, 'reduction_factor': 1, 'spk_embed_dim': None, 'use_masking': True, 'bce_pos_weight': 5.0, 'use_guided_attn_loss': True, 'guided_attn_loss_sigma': 0.4, 'guided_attn_loss_lambda': 1.0}, unused_parameters=False, use_amp=False, use_matplotlib=True, use_preprocessor=True, use_tensorboard=True, use_wandb=False, val_scheduler_criterion=('valid', 'loss'), valid_batch_bins=None, valid_batch_size=None, valid_batch_type=None, valid_data_path_and_name_and_type=[('dump/raw/valid/text', 'text', 'text'), ('dump/raw/valid/wav.scp', 'speech', 'sound')], valid_max_cache_size=None, valid_shape_file=['exp/tts_stats_raw_phn_tacotron_g2p_en_no_space/logdir/valid.5.scp'], version='202205', wandb_entity=None, wandb_id=None, wandb_model_log_interval=-1, wandb_name=None, wandb_project=None, write_collected_feats=False)
/content/espnet/espnet2/layers/stft.py:164: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  olens = (ilens - self.n_fft) // self.hop_length + 1
# Accounting: time=7 threads=1
# Ended (code 0) at Tue Jun  7 19:54:36 UTC 2022, elapsed time 7 seconds
